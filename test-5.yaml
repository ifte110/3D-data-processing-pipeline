apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: wf-example-pipeline
spec:
  entrypoint: dag-tasks
  templates:
  - name: dag-tasks
    dag:
      tasks:
      - name: fine-registration
        template: fine-registration
      - name: SOR
        template: SOR
        dependencies: [fine-registration]
        arguments:
          artifacts:
            - name: object
              from: "{{tasks.fine-registration.outputs.artifacts.object}}"
      - name: cloud-to-mesh
        template: cloud-to-mesh
        dependencies: [SOR]
        arguments:
          artifacts:
            - name: object
              from: "{{tasks.SOR.outputs.artifacts.object}}"

      
  - name: fine-registration
    inputs:
      artifacts:
        - name: file
          path: /file
          s3:
            bucket: my-bucket
            key: /2021_IFPT_hall.tar.gz
    script:
      image: ifte110/cc-new
      command: [bash]
      source: |
        FILES=($(find "/file" -type f -print0 | while IFS= read -r -d $'\0' file; do echo "$file"; done))
        
        xvfb-run CloudCompare -SILENT -AUTO_SAVE OFF -O  ${FILES[0]}  -O ${FILES[1]} -ICP -RANDOM_SAMPLING_LIMIT 1000 -SAVE_CLOUDS FILE /tmp/output_2.bin FILE /tmp/output_2.txt

        len=${#FILES[@]}
        for (( i=2; i < $len; i++ )); do
                 xvfb-run -a CloudCompare -SILENT -AUTO_SAVE OFF -O  /tmp/output_$i.bin  -O ${FILES[i]} -ICP -RANDOM_SAMPLING_LIMIT 1000 -SAVE_CLOUDS FILE /tmp/output_$[i+1].bin FILE /tmp/output_$[i+1].txt
        done

        mv /tmp/output_$i.bin /tmp/output.bin 

    outputs:
      artifacts:
      - name: object
        path: /tmp/output.bin

  - name : SOR
    inputs:
      artifacts:
        - name: object
          path: /file/output.bin
    script:
      image: ifte110/cc-new
      command: [bash]
      source: |
        xvfb-run CloudCompare -SILENT -AUTO_SAVE OFF -O /file/output.bin -SOR 8 1 -C_EXPORT_FMT PLY -SAVE_CLOUDS FILE /tmp/output_sor.ply

    outputs:
      artifacts:
      - name: object
        path: /tmp/output_sor.ply

  - name : cloud-to-mesh
    inputs:
      artifacts:
        - name: object
          path: /file/output_sor.ply
    script:
      image: ifte110/pym
      command: [python3]
      source: |
        import pymeshlab as pm
        ms = pm.MeshSet()
        ms.load_new_mesh('/file/output_sor.ply')
        ms.apply_filter('compute_normal_for_point_clouds')
        ms.apply_filter('generate_surface_reconstruction_screened_poisson')
        ms.save_current_mesh('/tmp/output_mesh.obj')

    outputs:
      artifacts:
      - name: object
        path: /tmp/output_mesh.obj